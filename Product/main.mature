/*
	This main.c only does one job fairly well:
	Given an executable candidate, check whether it satisfies the following rule -
		i.e. for each target input, the candidate is capable of delivering
			the output as expected. If not, diagostic its reason.
*/

#include "common.h"

#define MSG_ERR_RET(msg, res) \
	do { fprintf(stderr, "%s\n", msg); return(res); } while (0)

#define MSG_JUDGE_QUIT(msg) \
	{ printf("%s\n", msg); break; }

/* global variables */
long Time, Memory;

/*
	check whether the value in REG_SYS_CALL(x)
	is amongst the allowed system call list
*/
int isAllowedCall(const int syscall) {
	int i;

	for (i = 0; -1 != strace[i]; ++i)
		if (syscall == strace[i])
			return 1;
	return 0;
}

/*
	check whether the value in REG_ARG_1(x)
	is amongst allowed library mapping list
*/
int isValidAccess(const char *file) {
	int i;

	for (i = 0; ltrace[i]; ++i)
		if (0 == strcmp(file, ltrace[i]))
			return 1;
	return 0;
}

/*
	a wrap-up function for setting up resource limit
*/

void setRlimit() {
	struct rlimit usr_limit;

	usr_limit.rlim_cur = MAX_TIME / 1000;
	usr_limit.rlim_max = MAX_TIME / 1000 + 1;	// second(s)
	if (setrlimit(RLIMIT_CPU, &usr_limit))
		EXIT_MSG("Set Time Limit Failed", SYSTEM_ERROR);

	usr_limit.rlim_cur = MAX_MEMORY;
	usr_limit.rlim_max = MAX_MEMORY;			// byte(s)
	if (setrlimit(RLIMIT_AS, &usr_limit))
		EXIT_MSG("Set Memory Limit Failed", SYSTEM_ERROR);
}

/*
	Given the input file and output file, respectively,
	decide whether a specified source is satiesfied.
*/
int run(const char *bin, int in, int out) {
	int i;
	int status;
	int result = EXIT_SUCCESS;
	long file_test_tmp[100];
	struct rusage usage;
	struct user_regs_struct regs;
	pid_t child;

	/* assure that parent gets executed after child exits */
	child = vfork();
	if (child < 0) {
		MSG_ERR_RET("vfork() Failed", SYSTEM_ERROR);
	}
	/* fork a child to monitor(ptrace) its status */
	if (0 == child) {
		
		setRlimit();

		/* dup2 guarantees the atomic operation */
		if (dup2(in, STDIN_FILENO) < 0)
			EXIT_MSG("dup2(STDIN_FILENO) Failed", SYSTEM_ERROR);

		if (dup2(out, STDOUT_FILENO) < 0)
			EXIT_MSG("dup2(STDOUT_FILENO) Failed", SYSTEM_ERROR);

		if (ptrace(PTRACE_TRACEME, 0, NULL, NULL))
			EXIT_MSG("PTRACE_TRACEME Failed", SYSTEM_ERROR);

		if (-1 == execl(bin, "", NULL))
			EXIT_MSG("execl() Failed", SYSTEM_ERROR);
	}
	for ( ; ; ) {
		if (-1 == wait4(child, &status, WSTOPPED, &usage))
			MSG_ERR_RET("wait4() Failed", SYSTEM_ERROR);

		if (WIFEXITED(status)) {
			if (SYSTEM_ERROR == WEXITSTATUS(status))
				return SYSTEM_ERROR;
		} else if (SIGTRAP != WSTOPSIG(status)) {
			ptrace(PTRACE_KILL, child, NULL, NULL);
			switch (WSTOPSIG(status)) {
				case SIGSEGV:
				if (usage.ru_maxrss * (sysconf(_SC_PAGESIZE)) / MAX_MEMORY < 2)
					result = MEMORY_LIMIT_EXCEEDED;
				else
					result = RUNTIME_ERROR;
				break;
				case SIGALRM: case SIGXCPU: case SIGKILL:
					result = TIME_LIMIT_EXCEEDED;
				break;
			}
		}

		if (-1 == ptrace(PTRACE_GETREGS, child, NULL, &regs))
			goto END;

		if (!isAllowedCall(REG_SYS_CALL(&regs))) {
			ptrace(PTRACE_KILL, child, NULL, NULL);
			fprintf(stderr, "%llu\t", REG_SYS_CALL(&regs));
			MSG_ERR_RET("Invalid Syscall", RUNTIME_ERROR);
		} else if (SYS_open == REG_SYS_CALL(&regs)) {
			/* peek which file the child is about to open */
			for (i = 0; i < 100; i++) {
				file_test_tmp[i] = ptrace(PTRACE_PEEKDATA,
					child, REG_ARG_1(&regs) + i * sizeof(long), NULL);
				if (0 == file_test_tmp[i])
					break;
			}
			if (!isValidAccess((const char*)file_test_tmp)) {
				ptrace(PTRACE_KILL, child, NULL, NULL);
				fprintf(stderr, "%s\t", (const char*)file_test_tmp);
				MSG_ERR_RET("Invalid Access", RUNTIME_ERROR);
			}
		}
		/* trace next system call */
		if (-1 == ptrace(PTRACE_SYSCALL, child, NULL, NULL))
			MSG_ERR_RET("PTRACE_SYSCALL Failed", SYSTEM_ERROR);
	}
END:
	Time = usage.ru_utime.tv_sec * 1000 + usage.ru_utime.tv_usec / 1000
		+ usage.ru_stime.tv_sec * 1000 + usage.ru_stime.tv_usec / 1000;
	Memory = usage.ru_maxrss * (sysconf(_SC_PAGESIZE) / 1024);

	return result;
}

int diff(const char *s1, const char *s2) {
	/* test if the same */
	while (*s1 && *s1 == *s2) {
		++s1;
		++s2;
	}

	/* both encounter NUL */
	if (!(*s1 || *s2))
		return ACCEPTED;

	for ( ; ; ) {
		/* skip invisible characters */
		while (isspace(*s1))
			s1++;
		while (isspace(*s2))
			s2++;
		/* either is NUL, no need to compare more */
		if (!(*s1 && *s2))
			break;
		/* neither is NUL */
		if (*s1 != *s2)
			return WRONG_ANWSER;
		/* keep running */
		++s1;
		++s2;
	}
	return (*s1 || *s2) ? WRONG_ANWSER : PRESENTATION_ERROR;
}

/*
	when the tested source file has been compiled and
	successfully produced the output file, this function
	will perform the answer checking exercise.
*/
int check(int out, int tmp) {
	int result;
	char *out_mem, *tmp_mem;
	off_t out_len, tmp_len;
	off_t out_flag, tmp_flag;

	/* collect length infomation */
	out_len = lseek(out, 0, SEEK_END);
	tmp_len = lseek(tmp, 0, SEEK_END);

	if (-1 == out_len || -1 == tmp_len)
		MSG_ERR_RET("lseek() Failed", SYSTEM_ERROR);

	if (MAX_OUTPUT <= tmp_len)
		return OUTPUT_LIMIT_EXCEEDED;

	/* compare them according to their size */
	/* both are empty */
	if (0 == (out_len || tmp_len))
		return ACCEPTED;
	/* either is empty */
	if (0 == (out_len && tmp_len))
		return WRONG_ANWSER;

	/* rewind */
	out_flag = lseek(out, 0, SEEK_SET);
	tmp_flag = lseek(tmp, 0, SEEK_SET);

	if (-1 == out_flag || -1 == tmp_flag)
		MSG_ERR_RET("lseek() / rewind Failed", SYSTEM_ERROR);

	/* map files to memory for efficiency */
	if ((out_mem = mmap(NULL, out_len, PROT_READ, MAP_PRIVATE, out, 0)) == MAP_FAILED)
		MSG_ERR_RET("mmap(out_mem) Failed", SYSTEM_ERROR);
	if ((tmp_mem = mmap(NULL, tmp_len, PROT_READ, MAP_PRIVATE, tmp, 0)) == MAP_FAILED)
		MSG_ERR_RET("mmap(tmp_mem) Failed", SYSTEM_ERROR);

	result = diff(out_mem, tmp_mem);

	/* clean */
	munmap(out_mem, out_len);
	munmap(tmp_mem, tmp_len);
	
	return result;
}

/*
	test if haystack ends with the needle
*/
int endWith(const char *haystack, const char *needle) {
	size_t haystackLen = strlen(haystack);
	size_t needleLen = strlen(needle);

	if (haystackLen < needleLen)
		return 0;

	char *end = (char *)haystack + (haystackLen - needleLen);
	return 0 == strcmp(end, needle);
}

/*
	generate a temporary file name
*/
void randomString(char str[], size_t len) {
	int i;

	srand(time(NULL));
	for (i = 0; i < len-1; ++i) {
		str[i] = rand()%26 + 'a'; 
	}
	str[len - 1] = '\0';
}

/*
	count how many .in files there are in the folder
*/
#define countTestdata(dir) countFiles(dir, ".in")

int countFiles(const char *directory, const char *suffix) {
	int n, cnt = 0;
	struct dirent **filename;

	n = scandir(directory, &filename, NULL, alphasort);
	if (n < 0)
		EXIT_MSG("scandir() Failed", EXIT_FAILURE);
	else
		while (n--) {
			if (endWith(filename[n]->d_name, suffix))
				++cnt;
			free(filename[n]);
		}
	free(filename);
	return cnt;
}

void compare(const char *test_in, const char *test_out, const char *test_tmp) {
	char cmd[64];
	snprintf(cmd, sizeof(cmd), "core/diff %s %s %s", test_in, test_out, test_tmp);
	if (WEXITSTATUS(system(cmd)))
		EXIT_MSG("diff Failed", SYSTEM_ERROR);
}

int main(int argc, char *argv[], char *env[]) {
	int result = ACCEPTED;
	int num, total;
	typedef char char32[32];
	char32 test_in, test_out;
	char test_temp[9];

	int fd_in, fd_out, fd_temp;

	if (3 != argc)
		EXIT_MSG("Usage: judge exec_file problem_folder", EXIT_FAILURE);

	total = countTestdata(argv[2]);

	/* compose temp name */
	randomString(test_temp, sizeof test_temp);
	for (num = 0; num < total; ++num) {

		snprintf(test_in ,sizeof test_in, "%s/%d.in", argv[2], num);
		snprintf(test_out, sizeof test_out, "%s/%d.out", argv[2], num);

		/*
			TODO: replace fd_temp as memory which makes it rapider to access
		*/
		if ((fd_in = open(test_in, O_RDONLY, 0644)) < 0)
			MSG_ERR_RET("open(in) Failed.", SYSTEM_ERROR);
		if ((fd_temp = creat(test_temp, 0644)) < 0)
			MSG_ERR_RET("creat(tmp) Failed", SYSTEM_ERROR);

		result = run(argv[1], fd_in, fd_temp);

		/* in case of running out of available file descriptors */
		close(fd_in);
		close(fd_temp);

		if (EXIT_SUCCESS != result)
			break;

		if ((fd_out = open(test_out, O_RDONLY, 0644)) < 0)
			MSG_ERR_RET("open(out) Failed.", SYSTEM_ERROR);
		if ((fd_temp = open(test_temp, O_RDONLY, 0644)) < 0)
			MSG_ERR_RET("open(tmp) Failed.", SYSTEM_ERROR);

		result = check(fd_out, fd_temp);

		close(fd_out);
		close(fd_temp);

		if (WRONG_ANWSER == result)
			compare(test_in, test_out, test_temp);
		if (ACCEPTED != result)
			break;
	}

	switch (result) {
			case SYSTEM_ERROR:
				MSG_JUDGE_QUIT("System Error");
			case RUNTIME_ERROR:
				MSG_JUDGE_QUIT("Runtime Error");
			case TIME_LIMIT_EXCEEDED:
				MSG_JUDGE_QUIT("Time Limit Exceeded");
			case MEMORY_LIMIT_EXCEEDED:
				MSG_JUDGE_QUIT("Memory Limit Exceeded");
			case OUTPUT_LIMIT_EXCEEDED:
				MSG_JUDGE_QUIT("Output Limit Exceeded");
			case PRESENTATION_ERROR:
				MSG_JUDGE_QUIT("Presentation Error");
			case WRONG_ANWSER:
				MSG_JUDGE_QUIT("Wrong Anwser");
			case ACCEPTED:
				printf("Accepted TIME: %ldMS MEM: %ldKB\n", Time, Memory);
		}

	if (-1 == unlink(test_temp))
		MSG_ERR_RET("unlink Failed", SYSTEM_ERROR);
	return EXIT_SUCCESS;
}
